package agents;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.ParallelBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.SearchConstraints;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;

import java.io.IOException;

import behaviours.ReceiveMsgBidding;
import dao.domain.Annoucement;
import data.Annoucements;
import data.Preference;

public class BiddingAgent extends Agent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5540096653106418668L;
	private ClientAgent client; // klient ktorego przedstawia
	private AID[] systems;

	private Preference p;
	private Annoucements myAnnoces;
	private Annoucement favourite; // faworyzowana oferta

	protected void setup() {
		favourite = null;
		client = (ClientAgent) getArguments()[0];

		System.out.println("Jestem " + getLocalName()
				+ "\n\t-reprezentuje klienta o id " + client.getLocalName()
				+ " - " + client.getClientInfo().getName());

		systems = findServices("system aukcyjny");

		sendAskMsgToMorris();

		receiveMsgs();
	}

	/* szuka morris column */
	public AID[] findServices(String type) {
		DFAgentDescription dfd = new DFAgentDescription();
		ServiceDescription sd = new ServiceDescription();
		sd.setType(type);
		dfd.addServices(sd);

		SearchConstraints ALL = new SearchConstraints();
		ALL.setMaxResults(new Long(-1));

		try {
			DFAgentDescription[] result = DFService.search(this, dfd, ALL);
			AID[] agents = new AID[result.length];
			for (int i = 0; i < result.length; i++)
				agents[i] = result[i].getName();
			return agents;

		} catch (FIPAException fe) {
			fe.printStackTrace();
		}

		return null;

	}

	/* to bid */
	private void sendMsgToClient() {

		/* wysylanie wygranej aukcji */

		ACLMessage msg = new ACLMessage(ACLMessage.INFORM);

		msg.setOntology("preferencje");

		System.out.println("WYSYLANIE - " + getLocalName() + " -> "
				+ client.getLocalName() + msg.getContent());
		msg.addReceiver(client.getAID());
		send(msg);
	}

	/* to bid */
	public void sendBidMsgToMorris() {
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);

		findInterestingAnnoucement();
		
//TODO aby nie przebijal sam siebie  && favourite.getClientId() != client.getClientInfo().getId()
		if (favourite != null) {
			try {

				msg.setContentObject(favourite);

				msg.setOntology("bid");

				for (AID id : systems) {
					System.out
							.println("WYSYLANIE - " + getLocalName() + " -> "
									+ id.getLocalName() + " licytuje "
									+ favourite.getType() + " "
									+ favourite.getId() + " o cenie "
									+ favourite.getCurrentPrice()
									+ " i czasie zakonczenia "
									+ favourite.getEndDate());
					msg.addReceiver(id);
					send(msg);
				}
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println("Nie udalo sie wyslac podbicia aukcji");
			}
		} else {
			System.out.println("Nie moge przebic oferty");
		}

	}

	/* to ask */
	public void sendAskMsgToMorris() {
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);

		try {
			msg.setContentObject(p);
			msg.setOntology("aukcja");

			for (AID id : systems) {
				System.out.println("WYSYLANIE - " + getLocalName() + " -> "
						+ id.getLocalName() + " pytam o preferowane aukcje");
				msg.addReceiver(id);
				send(msg);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out
					.println("Nie udalo sie wyslac zapytania do morrisColumn");
		}
	}

	/* dodanie zachowania odbierania cyklicznego widaomosci */
	public void receiveMsgs() {

		ParallelBehaviour par = new ParallelBehaviour(
				ParallelBehaviour.WHEN_ALL);

		par.addSubBehaviour(new ReceiveMsgBidding(this, par));

		addBehaviour(par);

	}

	public void findInterestingAnnoucement() {
		/* prosba o aktualizacje ofert */
		updateAnnoucements();

		if (this.favourite != null) {
			updateFavourite();
			if (this.favourite.getStatus().equals("start")) {
				compare();
			} else {
				if (favourite.getWinnerOfert() == client.getClientInfo()
						.getId()) {

					System.out.println("Bidding"
							+ client.getClientInfo().getId() + " Wygralem!");
					endBidding();
				} else {
					System.out.println("Bidding"
							+ client.getClientInfo().getId() + " Przegralem!");
					favourite = null;
					compare();
				}
			}
		}else{
			compare();
		}
	}

	private void updateFavourite() {
		// TODO ma sprawdzac aktualne ceny od MorrisColumn
		favourite.setStatus("ended");
		Annoucements nowy = new Annoucements();
		for(Annoucement a : myAnnoces.getAnnoucements()){
			if(a.equals(favourite)){
				favourite.setStatus("start");
			}
			if(a.getCurrentPrice() < p.getMaxcena()){
				nowy.add(a);
			}
		}
		myAnnoces = nowy;
	}

	private void compare() {

		if (myAnnoces.isEmpty()) {
			this.favourite = null;
			System.out.println("Pusta");
			endBidding();
		} else if (myAnnoces.getSize() == 1) {
			this.favourite = myAnnoces.getFirst();
			System.out.println(getLocalName()
					+ " interesuje mnie tylko pierwsza "
					+ favourite.getCurrentPrice());
			

		} else {
			if (favourite == null) {
				this.favourite = myAnnoces.getFirst();
			}
			if (p.isCenapriority()) {
				for (Annoucement a : myAnnoces.getAnnoucements()) {
					if (!a.equals(favourite)) {
						if (a.getCurrentPrice() < favourite.getCurrentPrice()) {
							favourite = a;
							System.out.println("Ulubieniec ceny " + a.getCurrentPrice() +"<"+ p.getMaxcena());
						} else if (favourite.getCurrentPrice() == a
								.getCurrentPrice()
								&& favourite.getEndDate().before(a.getEndDate())) {
							favourite = a;
							System.out.println("Ulubieniec ceny " + a.getCurrentPrice() +"=="+ p.getMaxcena());
						}
						
					}
					System.out.println("Ulubieniec ceny " + favourite.getId());
				}
				System.out.println(getLocalName()
						+ " mam preferencje co do ceny i wybralem "
						+ favourite.getId());
			} else if (p.isDatapriority()) {
				for (Annoucement a : myAnnoces.getAnnoucements()) {
					if (!a.equals(favourite)) {
						if (favourite.getEndDate().before(a.getEndDate())) {
							favourite = a;
						} else if (favourite.getEndDate()
								.equals(a.getEndDate())
								&& a.getCurrentPrice() < favourite.getCurrentPrice()) {
							favourite = a;
						}
					}
					System.out.println("Ulubieniec datz " + favourite.getId());
				}
				System.out.println(getLocalName()
						+ " mam preferencje co do daty i wybralem "
						+ favourite.getId());
			}

		}

	}

	private void endBidding() {
		// TODO Auto-generated method stub

	}

	private void updateAnnoucements() {
		sendUpdateMsgToMorris();

	}

	private void sendUpdateMsgToMorris() {
		
		
	}

	public void addAnnounce(Annoucement a) {
		myAnnoces.add(a);
	}

	public ClientAgent getClient() {
		return client;
	}

	public void setClient(ClientAgent client) {
		this.client = client;
	}

	public Preference getPreference() {
		return p;
	}

	public void setPreference(Preference p) {
		this.p = p;
	}

	public Annoucements getMyAnnoces() {
		return myAnnoces;
	}

	public void setMyAnnoces(Annoucements myAnnoces) {
		this.myAnnoces = myAnnoces;
	}

	public AID[] getSystems() {
		return systems;
	}

	public void setSystems(AID[] systems) {
		this.systems = systems;
	}
}

package agents;

import java.io.IOException;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.Behaviour;
import jade.core.behaviours.ParallelBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.SearchConstraints;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;
import behaviours.ReceiveMessageBiddingFromClient;
import behaviours.ReceiveMessageBiddingFromMorris;
import dao.domain.Annoucement;
import data.Annoucements;
import data.Preference;
import data.Priority;

public class BiddingAgent extends Agent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5540096653106418668L;
	private ClientAgent client; // klient ktorego przedstawia
	private AID[] systems;

	private MessageTemplate clientMT;
	private MessageTemplate morrisMT;
	private Preference p;
	private Annoucements myAnnoces;
	private Behaviour loop;

	protected void setup() {

		client = (ClientAgent) getArguments()[0];

		System.out.println("Jestem " + getLocalName()
				+ "\n\t-reprezentuje klienta o id " + client.getLocalName()
				+ " - " + client.getClientInfo().getName());

		systems = findServices("system aukcyjny");

		setTemplates();

		sendAskMsgToMorris();

		receiveMsgs();
	}

	/* szuka morris column */
	public AID[] findServices(String type) {
		DFAgentDescription dfd = new DFAgentDescription();
		ServiceDescription sd = new ServiceDescription();
		sd.setType(type);
		dfd.addServices(sd);

		SearchConstraints ALL = new SearchConstraints();
		ALL.setMaxResults(new Long(-1));

		try {
			DFAgentDescription[] result = DFService.search(this, dfd, ALL);
			AID[] agents = new AID[result.length];
			for (int i = 0; i < result.length; i++)
				agents[i] = result[i].getName();
			return agents;

		} catch (FIPAException fe) {
			fe.printStackTrace();
		}

		return null;

	}

	/* ustawia wzorce wiadomosci dla klienta i dla morris collumn */
	public void setTemplates() {
		clientMT = MessageTemplate.and(
				MessageTemplate.MatchOntology("preferencje"),
				MessageTemplate.MatchSender(client.getAID()));

		morrisMT = MessageTemplate.MatchOntology("aukcja");
		if (systems != null) {
			for (AID a : systems) {
				morrisMT.and(morrisMT, MessageTemplate.MatchSender(a));
			}
		}

	}

	/* to bid */
	private void sendMsgToClient() {

		/* zgoda na reprezentowanie */
		/*
		 * TODO: moze jak znajdzie jakies aukcje to akceptuje jak nie ma to robi
		 * decline
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.INFORM);
		msg.setContent("ring ring cli");
		msg.setOntology("preferencje");

		System.out.println("WYSYLANIE - " + getLocalName() + " -> "
				+ client.getLocalName() + msg.getContent());
		msg.addReceiver(client.getAID());
		send(msg);

	}

	/* to bid */
	public void sendBidMsgToMorris() {
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
		Annoucement interesting = findInterestingAnnoucement();
		if (interesting != null) {
			try {

				msg.setContentObject(interesting);

				msg.setOntology("bid");

				for (AID id : systems) {
					System.out.println("WYSYLANIE - " + getLocalName() + " -> "
							+ id.getLocalName() + " licytuje "
							+ interesting.getType() + " " + interesting.getId()
							+ " o cenie " + interesting.getCurrentPrice() + " i czasie zakonczenia "+ interesting.getEndDate());
					msg.addReceiver(id);
					send(msg);
				}
			} catch (IOException e) {
				e.printStackTrace();
				System.out.println("Nie udalo sie wyslac podbicia aukcji");
			}
		}else{
			System.out.println("Nie moge przebic oferty");
		}

	}

	/* to ask */
	public void sendAskMsgToMorris() {
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);

		try {
			msg.setContentObject(p);
			msg.setOntology("aukcja");

			for (AID id : systems) {
				System.out.println("WYSYLANIE - " + getLocalName() + " -> "
						+ id.getLocalName() + " pytam o preferowane aukcje");
				msg.addReceiver(id);
				send(msg);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out
					.println("Nie udalo sie wyslac zapytania do morrisColumn");
		}
	}

	/* dodanie zachowania odbierania cyklicznego widaomosci */
	public void receiveMsgs() {

		ParallelBehaviour par = new ParallelBehaviour(
				ParallelBehaviour.WHEN_ALL);

		/* klient */
		par.addSubBehaviour(new ReceiveMessageBiddingFromClient(this, clientMT,
				par));

		/* morris column */
		par.addSubBehaviour(new ReceiveMessageBiddingFromMorris(this, morrisMT,
				par));

		addBehaviour(par);

	}

	public Annoucement findInterestingAnnoucement() {
		Annoucement win = new Annoucement();
		if (!myAnnoces.getAnnoucements().isEmpty()) {
			win = myAnnoces.getAnnoucements().get(0);
			if (p.getPrioty().equals(Priority.price)) {

				for (Annoucement a : myAnnoces.getAnnoucements()) {
					if (win.getCurrentPrice() > a.getCurrentPrice()) {
						win = a;
					} else if (win.getCurrentPrice() == a.getCurrentPrice()) {
						if (win.getEndDate().after(a.getEndDate())) {
							win = a;
						}
					}
				}

			} else if (p.getPrioty().equals(Priority.price)) {

				for (Annoucement a : myAnnoces.getAnnoucements()) {
					if (win.getEndDate().after(a.getEndDate())) {
						win = a;
					} else if (win.getCurrentPrice() == a.getCurrentPrice()) {
						if (win.getCurrentPrice() > a.getCurrentPrice()) {
							win = a;
						}
					}
				}

			} else {
				return null;
			}
		}

		if (win.getWinnerOfert() == client.getClientInfo().getId()) {
			return null;
		} else {
			return win;
		}
	}

	public void addAnnounce(Annoucement a) {
		myAnnoces.add(a);
	}

	public ClientAgent getClient() {
		return client;
	}

	public void setClient(ClientAgent client) {
		this.client = client;
	}

	public Preference getPreference() {
		return p;
	}

	public void setPreference(Preference p) {
		this.p = p;
	}

	public Annoucements getMyAnnoces() {
		return myAnnoces;
	}

	public void setMyAnnoces(Annoucements myAnnoces) {
		this.myAnnoces = myAnnoces;
	}

	public AID[] getSystems() {
		return systems;
	}

	public void setSystems(AID[] systems) {
		this.systems = systems;
	}
}

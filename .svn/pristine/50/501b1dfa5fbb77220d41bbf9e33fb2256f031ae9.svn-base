package agents;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.Behaviour;
import jade.core.behaviours.ParallelBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.SearchConstraints;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;

import java.util.ArrayList;

import behaviours.ReceiveMessageFromClient;
import behaviours.ReceiveMessageFromMorris;
import data.Announce;
import data.Preference;

public class BiddingAgent extends Agent {

	private ClientAgent client; // klient ktorego przedstawia
	private AID[] systems;


	private MessageTemplate clientMT;
	private MessageTemplate morrisMT;
	private Preference p;
	private ArrayList<Announce> myAnnoces;
	private Behaviour loop;

	protected void setup() {

		client = (ClientAgent) getArguments()[0];

		System.out.println("Jestem " + getLocalName() + "\n\t-reprezentuje klienta o id "
				+ client.getLocalName() + " - " + client.getClientInfo().getName());


		systems = findServices("system aukcyjny");

		setTemplates();

		sendAskMsgToMorris(systems);

		receiveMsgs();
	}

	/* szuka morris column */
	public AID[] findServices(String type) {
		DFAgentDescription dfd = new DFAgentDescription();
		ServiceDescription sd = new ServiceDescription();
		sd.setType(type);
		dfd.addServices(sd);

		SearchConstraints ALL = new SearchConstraints();
		ALL.setMaxResults(new Long(-1));

		try {
			DFAgentDescription[] result = DFService.search(this, dfd, ALL);
			AID[] agents = new AID[result.length];
			for (int i = 0; i < result.length; i++)
				agents[i] = result[i].getName();
			return agents;

		} catch (FIPAException fe) {
			fe.printStackTrace();
		}

		return null;

	}

	/* ustawia wzorce wiadomosci dla klienta i dla morris collumn */
	public void setTemplates() {
		clientMT = MessageTemplate.and(
				MessageTemplate.MatchOntology("preferencje"),
				MessageTemplate.MatchSender(client.getAID()));

		morrisMT = MessageTemplate.MatchOntology("aukcja");
		if (systems != null) {
			for (AID a : systems) {
				morrisMT.and(morrisMT, MessageTemplate.MatchSender(a));
			}
		}

	}

	/* to bid */
	private void sendMsgToClient() {

		/* zgoda na reprezentowanie */
		/*
		 * TODO: moze jak znajdzie jakies aukcje to akceptuje jak nie ma to robi
		 * decline
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.INFORM);
		msg.setContent("ring ring cli");
		msg.setOntology("preferencje");

		System.out.println("WYSYLANIE - " + getLocalName() + " -> "
				+ client.getLocalName() + msg.getContent());
		msg.addReceiver(client.getAID());
		send(msg);

	}

	/* to bid */
	private void sendBidMsgToMorris(AID[] a) {
		ACLMessage msg = new ACLMessage(ACLMessage.INFORM);
		msg.setContent("ring ring bid");
		msg.setOntology("aukcja");

		for (AID id : a) {
			System.out.println("WYSYLANIE - " + getLocalName() + " -> "
					+ id.getLocalName() + msg.getContent());
			msg.addReceiver(id);
			send(msg);
		}
	}

	/* to ask */
	public void sendAskMsgToMorris(AID[] a) {
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);

		try {
			p = new Preference();
			msg.setContentObject(p);
			msg.setOntology("aukcja");

			for (AID id : a) {
				System.out.println("WYSYLANIE - " + getLocalName() + " -> "
						+ id.getLocalName() + " pytam o preferowane aukcje");
				msg.addReceiver(id);
				send(msg);
			}
		} catch (Exception e) {
			System.out
					.println("Nie udalo sie wyslac zapytania do morrisColumn");
		}
	}

	/* dodanie zachowania odbierania cyklicznego widaomosci */
	public void receiveMsgs() {

		ParallelBehaviour par = new ParallelBehaviour( ParallelBehaviour.WHEN_ALL );
		
		/* klient */
		par.addSubBehaviour(new ReceiveMessageFromClient(this, clientMT, par));

		/* morris column */
		par.addSubBehaviour(new ReceiveMessageFromMorris(this, morrisMT, par));

		addBehaviour(par);
		
	}

	public void addAnnounce(Announce a) {
		myAnnoces.add(a);
	}

	public ClientAgent getClient() {
		return client;
	}

	public void setClient(ClientAgent client) {
		this.client = client;
	}

	public Preference getP() {
		return p;
	}

	public void setP(Preference p) {
		this.p = p;
	}

	public ArrayList<Announce> getMyAnnoces() {
		return myAnnoces;
	}

	public void setMyAnnoces(ArrayList<Announce> myAnnoces) {
		this.myAnnoces = myAnnoces;
	}
	public AID[] getSystems() {
		return systems;
	}

	public void setSystems(AID[] systems) {
		this.systems = systems;
	}
}
